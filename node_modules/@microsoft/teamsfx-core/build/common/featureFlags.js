"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPreviewFeaturesEnabled = exports.isBotNotificationEnabled = exports.initializePreviewFeatureFlags = exports.isFeatureFlagEnabled = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const process = tslib_1.__importStar(require("process"));
const constants_1 = require("./constants");
// Determine whether feature flag is enabled based on environment variable setting
function isFeatureFlagEnabled(featureFlagName, defaultValue = false) {
    const flag = process.env[featureFlagName];
    if (flag === undefined) {
        return defaultValue; // allows consumer to set a default value when environment variable not set
    }
    else {
        return flag === "1" || flag.toLowerCase() === "true"; // can enable feature flag by set environment variable value to "1" or "true"
    }
}
exports.isFeatureFlagEnabled = isFeatureFlagEnabled;
/**
 * Update all preview feature flags.
 */
function initializePreviewFeatureFlags() {
    if (isFeatureFlagEnabled(constants_1.FeatureFlagName.Preview, false)) {
        process.env[constants_1.FeatureFlagName.BotNotification] = "true";
        process.env[constants_1.FeatureFlagName.M365App] = "true";
        process.env[constants_1.FeatureFlagName.ExistingTabApp] = "true";
        process.env[constants_1.FeatureFlagName.ConfigUnify] = "true";
        process.env[constants_1.FeatureFlagName.AadManifest] = "true";
        process.env[constants_1.FeatureFlagName.ApiConnect] = "true";
        process.env[constants_1.FeatureFlagName.DeployManifest] = "true";
    }
}
exports.initializePreviewFeatureFlags = initializePreviewFeatureFlags;
function isBotNotificationEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.BotNotification, false);
}
exports.isBotNotificationEnabled = isBotNotificationEnabled;
function isPreviewFeaturesEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.Preview, false);
}
exports.isPreviewFeaturesEnabled = isPreviewFeaturesEnabled;
//# sourceMappingURL=featureFlags.js.map