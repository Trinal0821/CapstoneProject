"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterResourceProviderError = exports.CommandExecutionError = exports.MessageEndpointUpdatingError = exports.RestartWebAppError = exports.DeployTimeoutError = exports.DeployStatusError = exports.ZipDeployError = exports.ListPublishingCredentialsError = exports.PackDirExistenceError = exports.ConfigValidationError = exports.ConfigUpdatingError = exports.UnzipError = exports.ProvisionError = exports.TemplateZipFallbackError = exports.CreateAADSecretError = exports.CreateAADAppError = exports.AADAppCheckingError = exports.checkAndThrowIfMissing = exports.SomethingMissingError = exports.PreconditionError = exports.PluginError = exports.isPluginError = exports.isErrorWithCode = exports.isErrorWithMessage = exports.isHttpError = exports.ErrorType = void 0;
const errorCodes_1 = require("../aad/errorCodes");
const errors_1 = require("../aad/errors");
const constants_1 = require("./constants");
const messages_1 = require("./resources/messages");
const localizeUtils_1 = require("../../../common/localizeUtils");
exports.ErrorType = {
    USER: "User",
    SYSTEM: "System",
};
function isHttpError(e) {
    return e instanceof Object && "response" in e;
}
exports.isHttpError = isHttpError;
function isErrorWithMessage(e) {
    return e instanceof Object && "message" in e;
}
exports.isErrorWithMessage = isErrorWithMessage;
function isErrorWithCode(e) {
    return e instanceof Object && "code" in e && typeof e["code"] === "string";
}
exports.isErrorWithCode = isErrorWithCode;
function isPluginError(e) {
    return e instanceof Object && "innerError" in e;
}
exports.isPluginError = isPluginError;
function resolveInnerError(target, helpLinkMap) {
    var _a, _b, _c, _d;
    if (!target.innerError)
        return;
    const statusCode = isHttpError(target.innerError) ? (_a = target.innerError.response) === null || _a === void 0 ? void 0 : _a.status : 500;
    if (statusCode) {
        if (statusCode >= 400 && statusCode < 500) {
            target.errorType = exports.ErrorType.USER;
        }
        else {
            target.errorType = exports.ErrorType.SYSTEM;
        }
    }
    if (isHttpError(target.innerError)) {
        const errorCode = (_d = (_c = (_b = target.innerError.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.code;
        if (errorCode) {
            const helpLink = helpLinkMap.get(errorCode);
            if (helpLink)
                target.helpLink = helpLink;
        }
    }
}
class PluginError extends Error {
    constructor(type, name, details, suggestions, innerError, helpLink) {
        super(details[0]);
        this.name = name;
        this.details = details;
        this.suggestions = suggestions;
        this.errorType = type;
        this.innerError = innerError;
        this.helpLink = helpLink;
        Object.setPrototypeOf(this, PluginError.prototype);
    }
    genMessage() {
        let msg = `${this.details[0]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getDefaultString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
    genDisplayMessage() {
        let msg = `${this.details[1]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getLocalizedString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
}
exports.PluginError = PluginError;
class PreconditionError extends PluginError {
    constructor(message, suggestions) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.PRECONDITION_ERROR, message, suggestions);
    }
}
exports.PreconditionError = PreconditionError;
class SomethingMissingError extends PreconditionError {
    constructor(something) {
        super(messages_1.Messages.SomethingIsMissing(something), [messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.SomethingMissingError = SomethingMissingError;
function checkAndThrowIfMissing(name, value) {
    if (!value) {
        throw new SomethingMissingError(name);
    }
    return value;
}
exports.checkAndThrowIfMissing = checkAndThrowIfMissing;
class AADAppCheckingError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.CALL_APPSTUDIO_API_ERROR, messages_1.Messages.FailToCallAppStudioForCheckingAADApp, [messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.AADAppCheckingError = AADAppCheckingError;
class CreateAADAppError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, errors_1.CreateAppError.name, errors_1.CreateAppError.message(), [], innerError);
        resolveInnerError(this, errorCodes_1.GraphErrorCodes);
    }
}
exports.CreateAADAppError = CreateAADAppError;
class CreateAADSecretError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, errors_1.CreateSecretError.name, errors_1.CreateSecretError.message(), [], innerError);
        resolveInnerError(this, errorCodes_1.GraphErrorCodes);
    }
}
exports.CreateAADSecretError = CreateAADSecretError;
class TemplateZipFallbackError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, "TemplateZipFallbackError", [
            localizeUtils_1.getDefaultString("plugins.bot.TemplateZipFallbackError"),
            localizeUtils_1.getLocalizedString("plugins.bot.TemplateZipFallbackError"),
        ], [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class ProvisionError extends PluginError {
    constructor(resource, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.PROVISION_ERROR, messages_1.Messages.FailToProvisionSomeResource(resource), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ProvisionError = ProvisionError;
class UnzipError extends PluginError {
    constructor(path) {
        super(exports.ErrorType.USER, "UnzipError", [localizeUtils_1.getDefaultString("plugins.bot.UnzipError"), localizeUtils_1.getLocalizedString("plugins.bot.UnzipError")], [
            messages_1.Messages.CheckOutputLogAndTryToFix,
            messages_1.Messages.ReopenWorkingDir(path),
            messages_1.Messages.RetryTheCurrentStep,
        ]);
    }
}
exports.UnzipError = UnzipError;
class ConfigUpdatingError extends PluginError {
    constructor(configName, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.CONFIG_UPDATING_ERROR, messages_1.Messages.FailToUpdateConfigs(configName), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ConfigUpdatingError = ConfigUpdatingError;
class ConfigValidationError extends PluginError {
    constructor(name, value) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.CONFIG_VALIDATION_ERROR, messages_1.Messages.SomethingIsInvalidWithValue(name, value), [messages_1.Messages.RecoverConfig, messages_1.Messages.RecreateTheProject[1]]);
    }
}
exports.ConfigValidationError = ConfigValidationError;
class PackDirExistenceError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, constants_1.ErrorNames.PACK_DIR_EXISTENCE_ERROR, messages_1.Messages.SomethingIsNotExisting("pack directory"), [messages_1.Messages.RecreateTheProject[1]]);
    }
}
exports.PackDirExistenceError = PackDirExistenceError;
class ListPublishingCredentialsError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.LIST_PUBLISHING_CREDENTIALS_ERROR, messages_1.Messages.FailToListPublishingCredentials, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ListPublishingCredentialsError = ListPublishingCredentialsError;
class ZipDeployError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.ZIP_DEPLOY_ERROR, messages_1.Messages.FailToDoZipDeploy, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ZipDeployError = ZipDeployError;
class DeployStatusError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.DEPLOY_STATUS_ERROR, messages_1.Messages.FailToCheckDeployStatus, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.DeployStatusError = DeployStatusError;
class DeployTimeoutError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, constants_1.ErrorNames.DEPLOY_TIMEOUT_ERROR, messages_1.Messages.CheckDeployStatusTimeout, [
            messages_1.Messages.CheckOutputLogAndTryToFix,
            messages_1.Messages.RetryTheCurrentStep,
        ]);
    }
}
exports.DeployTimeoutError = DeployTimeoutError;
class RestartWebAppError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.RESTART_WEBAPP_ERROR, messages_1.Messages.FailToRestartWebApp, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.RestartWebAppError = RestartWebAppError;
class MessageEndpointUpdatingError extends PluginError {
    constructor(endpoint, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.MSG_ENDPOINT_UPDATING_ERROR, messages_1.Messages.FailToUpdateMessageEndpoint(endpoint), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.MessageEndpointUpdatingError = MessageEndpointUpdatingError;
class CommandExecutionError extends PluginError {
    constructor(cmd, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.COMMAND_EXECUTION_ERROR, messages_1.Messages.CommandExecutionFailed(cmd), [messages_1.Messages.CheckCommandOutputAndTryToFixIt, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.CommandExecutionError = CommandExecutionError;
class RegisterResourceProviderError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, "RegisterResourceProviderError", [
            localizeUtils_1.getDefaultString("plugins.bot.RegisterResourceProviderError"),
            localizeUtils_1.getLocalizedString("plugins.bot.RegisterResourceProviderError"),
        ], [
            messages_1.Messages.RegisterRequiredRP(constants_1.AzureConstants.requiredResourceProviders),
            messages_1.Messages.CheckOutputLogAndTryToFix,
        ], innerError);
    }
}
exports.RegisterResourceProviderError = RegisterResourceProviderError;
//# sourceMappingURL=errors.js.map