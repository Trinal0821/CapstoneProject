"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTemplateInfos = exports.TemplateInfo = void 0;
const constants_1 = require("./../constants");
const templates_1 = require("../../../../../common/template-utils/templates");
class TemplateInfo {
    constructor(ctx, group, templateVariable) {
        this.group = group;
        this.version = TemplateInfo.version;
        this.language = TemplateInfo.DonetLanguage;
        this.variables = templateVariable;
        this.scenario = TemplateInfo.DefaultScenario;
    }
}
exports.TemplateInfo = TemplateInfo;
TemplateInfo.SupportedCapabilities = new Map([
    [constants_1.Capability.tab, "IS_TAB"],
    [constants_1.Capability.bot, "IS_BOT"],
]);
TemplateInfo.DonetLanguage = "csharp";
TemplateInfo.DefaultScenario = "default";
TemplateInfo.BaseGroup = "blazor-base";
TemplateInfo.version = templates_1.templatesVersion;
function generateTemplateInfos(selectedCapabilities, ctx) {
    const projectName = ctx.projectSettings.appName;
    const templateVariable = { BlazorAppServer: projectName };
    const templateInfoList = [];
    const variables = [];
    selectedCapabilities.forEach((capability) => {
        if (TemplateInfo.SupportedCapabilities.has(capability)) {
            templateInfoList.push(new TemplateInfo(ctx, capability.toLowerCase(), templateVariable));
            variables.push(TemplateInfo.SupportedCapabilities.get(capability));
        }
    });
    // Generate templateInfo for base scenrio. Add variables into templateVariable
    variables.forEach((v) => (templateVariable[v] = "true"));
    const baseTemplateInfo = new TemplateInfo(ctx, TemplateInfo.BaseGroup, templateVariable);
    templateInfoList.push(baseTemplateInfo);
    return templateInfoList;
}
exports.generateTemplateInfos = generateTemplateInfos;
//# sourceMappingURL=templateInfo.js.map