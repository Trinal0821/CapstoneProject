// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepsHandler = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const constants_1 = require("./constants");
const result_1 = require("./result");
const errors_1 = require("./errors");
const telemetry_1 = require("./telemetry");
const folder_1 = require("../../../folder");
class DepsHandler {
    constructor(workspaceFolder, componentType) {
        this.projectRoot = workspaceFolder;
        this.componentType = componentType;
    }
    async addPkgDeps() {
        const depsConfig = await this.getDepsConfig();
        return await this.updateLocalPkgDepsVersion(depsConfig);
    }
    async getDepsConfig() {
        const configPath = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "apiconnector");
        const sdkConfigPath = path.join(configPath, constants_1.Constants.pkgJsonFile);
        const sdkContent = await fs.readJson(sdkConfigPath);
        return sdkContent.dependencies;
    }
    async updateLocalPkgDepsVersion(pkgConfig) {
        const localPkgPath = path.join(this.projectRoot, this.componentType, constants_1.Constants.pkgJsonFile);
        if (!(await fs.pathExists(localPkgPath))) {
            throw result_1.ResultFactory.UserError(errors_1.ErrorMessage.localPkgFileNotExistError.name, errors_1.ErrorMessage.localPkgFileNotExistError.message(this.componentType));
        }
        const pkgContent = await fs.readJson(localPkgPath);
        let needUpdate = false;
        for (const pkgItem in pkgConfig) {
            if (this.sdkVersionCheck(pkgContent.dependencies, pkgItem, pkgConfig[pkgItem])) {
                pkgContent.dependencies[pkgItem] = pkgConfig[pkgItem];
                needUpdate = true;
            }
        }
        if (needUpdate) {
            await fs.writeFile(localPkgPath, JSON.stringify(pkgContent, null, 4));
            const telemetryProperties = { component: this.componentType };
            telemetry_1.TelemetryUtils.sendEvent(telemetry_1.Telemetry.stage.updatePkg, undefined, telemetryProperties);
            return {
                changeType: result_1.FileChangeType.Update,
                filePath: localPkgPath,
            }; // return modified files
        }
        return undefined;
    }
    sdkVersionCheck(deps, sdkName, sdkVersion) {
        // sdk not in dependencies.
        if (!deps[sdkName]) {
            return true;
        }
        // local sdk version intersect with sdk version in config.
        else if (semver_1.default.intersects(deps[sdkName], sdkVersion)) {
            return false;
        }
        // local sdk version lager than sdk version in config.
        else if (semver_1.default.gt(semver_1.default.minVersion(deps[sdkName]), semver_1.default.minVersion(sdkVersion))) {
            return false;
        }
        else {
            throw result_1.ResultFactory.UserError(errors_1.ErrorMessage.sdkVersionImcompatibleError.name, errors_1.ErrorMessage.sdkVersionImcompatibleError.message(this.componentType, deps[sdkName], sdkVersion));
        }
    }
}
exports.DepsHandler = DepsHandler;
//# sourceMappingURL=depsHandler.js.map