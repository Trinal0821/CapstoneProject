// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkHttp = exports.checkIsGuid = exports.checkEmptySelect = exports.checkEmptyValue = exports.checkApiNameExist = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../../../common/localizeUtils");
const utils_1 = require("./utils");
const httpRegex = /^http[s]?:\/\/.+/;
const guidRegex = /^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/;
async function checkApiNameExist(input, projectPath, components, languageType) {
    const apiFileName = utils_1.getSampleFileName(input, languageType);
    for (const component of components) {
        const componentPath = path_1.default.join(projectPath, component);
        // This pathExistsSync is a workaround for cli interactive command.
        if (fs.pathExistsSync(path_1.default.join(componentPath, apiFileName))) {
            return localizeUtils_1.getLocalizedString("plugins.apiConnector.QuestionAppName.validation.ApiNameExist", apiFileName);
        }
    }
    return undefined;
}
exports.checkApiNameExist = checkApiNameExist;
async function checkEmptyValue(input) {
    if (input) {
        return undefined;
    }
    return localizeUtils_1.getLocalizedString("plugins.apiConnector.Question.validation.EmptyValue");
}
exports.checkEmptyValue = checkEmptyValue;
async function checkEmptySelect(input) {
    const name = input;
    if (name.length === 0) {
        return localizeUtils_1.getLocalizedString("plugins.apiConnector.questionComponentSelect.emptySelection");
    }
    return undefined;
}
exports.checkEmptySelect = checkEmptySelect;
async function checkIsGuid(input) {
    if (guidRegex.exec(input)) {
        return undefined;
    }
    return localizeUtils_1.getLocalizedString("plugins.apiConnector.Question.validation.NotGuid");
}
exports.checkIsGuid = checkIsGuid;
async function checkHttp(input) {
    if (httpRegex.exec(input)) {
        return undefined;
    }
    return localizeUtils_1.getLocalizedString("plugins.apiConnector.QuestionApiEndpoint.validation.NotHttp");
}
exports.checkHttp = checkHttp;
//# sourceMappingURL=checker.js.map