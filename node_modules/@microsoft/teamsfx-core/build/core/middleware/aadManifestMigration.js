"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadManifestMigrationMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../common/tools");
const error_1 = require("../error");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const telemetry_1 = require("../../common/telemetry");
const globalVars_1 = require("../globalVars");
const localizeUtils_1 = require("../../common/localizeUtils");
const folder_1 = require("../../folder");
const projectSettingsLoader_1 = require("./projectSettingsLoader");
const projectMigrator_1 = require("./projectMigrator");
const consolidateLocalRemote_1 = require("./consolidateLocalRemote");
const constants_1 = require("../../plugins/resource/aad/constants");
const constants_2 = require("../../plugins/solution/fx-solution/constants");
const os = tslib_1.__importStar(require("os"));
const upgradeButton = "Upgrade";
let userCancelFlag = false;
const backupFolder = ".backup";
const AadManifestMigrationMW = async (ctx, next) => {
    if (await projectMigrator_1.needMigrateToArmAndMultiEnv(ctx)) {
        await next();
    }
    else if (await consolidateLocalRemote_1.needConsolidateLocalRemote(ctx)) {
        await next();
    }
    else if ((await needMigrateToAadManifest(ctx)) && checkMethod(ctx)) {
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectMigratorNotificationStart);
        const res = await (globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.ui.showMessage("warn", localizeUtils_1.getLocalizedString("core.aadManifestMigration.Message"), true, upgradeButton));
        const answer = (res === null || res === void 0 ? void 0 : res.isOk()) ? res.value : undefined;
        if (!answer || answer != upgradeButton) {
            telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationNotification, {
                [telemetry_1.TelemetryProperty.Status]: telemetry_1.ProjectMigratorStatus.Cancel,
            });
            ctx.result = teamsfx_api_1.err(error_1.AadManifestMigrationCanceledError());
            outputCancelMessage(ctx);
            return;
        }
        try {
            await migrate(ctx);
            await next();
        }
        catch (error) {
            telemetry_1.sendTelemetryErrorEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationError, teamsfx_api_1.assembleError(error, error_1.CoreSource));
            throw error;
        }
    }
    else {
        await next();
    }
};
exports.AadManifestMigrationMW = AadManifestMigrationMW;
async function needMigrateToAadManifest(ctx) {
    try {
        if (!tools_1.isConfigUnifyEnabled() || !tools_1.isAadManifestEnabled()) {
            return false;
        }
        const inputs = ctx.arguments[ctx.arguments.length - 1];
        if (!inputs.projectPath) {
            return false;
        }
        const fxExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, ".fx"));
        if (!fxExist) {
            return false;
        }
        const aadManifestTemplateExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, "templates", "appPackage", "aad.template.json"));
        if (aadManifestTemplateExist) {
            return false;
        }
        const permissionFileExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, "permissions.json"));
        const projectSettingsJson = await fs_extra_1.default.readJson(path_1.default.join(inputs.projectPath, ".fx", "configs", "projectSettings.json"));
        const aadPluginIsActive = projectSettingsJson.solutionSettings.activeResourcePlugins.includes(constants_2.PluginNames.AAD);
        if (!aadPluginIsActive || !permissionFileExist) {
            return false;
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
function outputCancelMessage(ctx) {
    globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.warning(localizeUtils_1.getLocalizedString("core.aadManifestMigration.Canceled"));
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    if (inputs.platform === teamsfx_api_1.Platform.VSCode) {
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.warning(localizeUtils_1.getLocalizedString("core.aadManifestMigration.VSCodeCanceledNotice"));
    }
    else {
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.warning(localizeUtils_1.getLocalizedString("core.aadManifestMigration.CLICanceledNotice"));
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.warning(localizeUtils_1.getLocalizedString("core.aadManifestMigration.CLINotReadyInstallLatestVersionNotice"));
    }
}
function permissionsToRequiredResourceAccess(permissions) {
    const result = [];
    permissions.forEach((permission) => {
        const res = {
            resourceAppId: permission.resource,
            resourceAccess: permission.application
                .map((item) => {
                return { id: item, type: "Role" };
            })
                .concat(permission.delegated.map((item) => {
                return { id: item, type: "Scope" };
            })),
        };
        result.push(res);
    });
    return result;
}
async function migrate(ctx) {
    telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationStart);
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    const fileList = [];
    const loadRes = await projectSettingsLoader_1.loadProjectSettings(inputs, true);
    if (loadRes.isErr()) {
        ctx.result = teamsfx_api_1.err(loadRes.error);
        return false;
    }
    const projectSettings = loadRes.value;
    const projectSettingsPath = path_1.default.join(inputs.projectPath, ".fx", "configs", "projectSettings.json");
    const permissionFilePath = path_1.default.join(inputs.projectPath, "permissions.json");
    try {
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationAddAADTemplateStart);
        // add aad.template.file
        const permissions = (await fs_extra_1.default.readJson(permissionFilePath));
        const requiredResourceAccess = permissionsToRequiredResourceAccess(permissions);
        const templatesFolder = folder_1.getTemplatesFolder();
        const aadManifestTemplatePath = `${templatesFolder}/${constants_1.Constants.aadManifestTemplateFolder}/${constants_1.Constants.aadManifestTemplateName}`;
        const aadManifestJson = await fs_extra_1.default.readJson(aadManifestTemplatePath);
        aadManifestJson.requiredResourceAccess = requiredResourceAccess;
        const aadManifestPath = path_1.default.join(inputs.projectPath, "templates", "appPackage", "aad.template.json");
        const projectSettingsJson = await fs_extra_1.default.readJson(projectSettingsPath);
        if (projectSettingsJson.solutionSettings.capabilities.includes("Tab")) {
            aadManifestJson.replyUrlsWithType.push({
                url: "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/auth-end.html",
                type: "Web",
            });
            aadManifestJson.replyUrlsWithType.push({
                url: "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/auth-end.html?clientId={{state.fx-resource-aad-app-for-teams.clientId}}",
                type: "Spa",
            });
            aadManifestJson.replyUrlsWithType.push({
                url: "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/blank-auth-end.html",
                type: "Spa",
            });
        }
        if (projectSettingsJson.solutionSettings.capabilities.includes("Bot")) {
            aadManifestJson.replyUrlsWithType.push({
                url: "{{state.fx-resource-aad-app-for-teams.botEndpoint}}/auth-end.html",
                type: "Web",
            });
        }
        await fs_extra_1.default.writeJSON(aadManifestPath, aadManifestJson, { spaces: 4, EOL: os.EOL });
        fileList.push(aadManifestPath);
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationAddAADTemplate);
        // add SSO
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationAddSSOCapabilityStart);
        if (projectSettingsJson.solutionSettings.capabilities.includes("Tab") &&
            !projectSettingsJson.solutionSettings.capabilities.includes("TabSSO")) {
            projectSettingsJson.solutionSettings.capabilities.push("TabSSO");
        }
        if (projectSettingsJson.solutionSettings.capabilities.includes("Bot") &&
            !projectSettingsJson.solutionSettings.capabilities.includes("BotSSO")) {
            projectSettingsJson.solutionSettings.capabilities.push("BotSSO");
        }
        await fs_extra_1.default.writeJSON(projectSettingsPath, projectSettingsJson, { spaces: 4, EOL: os.EOL });
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationAddSSOCapability);
        // backup
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationBackupStart);
        const backupPath = path_1.default.join(inputs.projectPath, backupFolder);
        await fs_extra_1.default.ensureDir(path_1.default.join(backupPath, ".fx", "configs"));
        await fs_extra_1.default.writeJSON(path_1.default.join(backupPath, ".fx", "configs", "projectSettings.json"), projectSettings, { spaces: 4, EOL: os.EOL });
        fileList.push(path_1.default.join(backupPath, ".fx", "configs", "projectSettings.json"));
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationBackup);
    }
    catch (e) {
        for (const item of fileList) {
            await fs_extra_1.default.remove(item);
        }
        await fs_extra_1.default.writeJSON(projectSettingsPath, projectSettings, { spaces: 4, EOL: os.EOL });
        throw e;
    }
    telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ProjectAadManifestMigrationAddAADTemplate);
    postMigration(inputs);
    return true;
}
function checkMethod(ctx) {
    const methods = new Set(["getProjectConfig", "checkPermission"]);
    if (ctx.method && methods.has(ctx.method) && userCancelFlag)
        return false;
    userCancelFlag = ctx.method != undefined && methods.has(ctx.method);
    return true;
}
async function postMigration(inputs) {
    if (inputs.platform === teamsfx_api_1.Platform.VSCode) {
        await (globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.ui.showMessage("info", localizeUtils_1.getLocalizedString("core.aadManifestMigration.outputMsg"), false, "OK"));
    }
    else {
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.info(localizeUtils_1.getLocalizedString("core.aadManifestMigration.SuccessMessage"));
    }
}
//# sourceMappingURL=aadManifestMigration.js.map